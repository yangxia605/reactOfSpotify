/** * Created by mianmian on 2018/3/15. */const CLIENT_ID = 'b1c5f647ad044b9c9aadf340da3b7e0d';const REDIRECT_URI= 'http%3a%2f%2flocalhost%3a3000%2f';//http://localhost:3000/let accessToken=  '';let userId = '';let playlistId= '';const Spotify = {  //Get a Spotify user's access token  getAccessToken:() =>{    if(accessToken !== ''){      return accessToken;    }else{      //check if it has just been obtained.      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);      //if login,return the accessToken      if(accessTokenMatch ){//token has just been obtained.        //Set the access token value        accessToken = accessTokenMatch[0].split('=')[1];        // expire time        window.setTimeout(() => accessToken = '', expiresInMatch * 1000);        window.history.pushState({accessToken: ''}, null, '/');      }else{        //make request        window.location.href= `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;      }    }  },  //Send a search request to the Spotify API  search: (term) =>{    Spotify.getAccessToken();    console.log(accessToken);    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{     headers: {       Authorization: `Bearer ${accessToken}`     }   }).then(response => {      return response.json();   }).then(jsonResponse => {     if(jsonResponse.tracks){       console.log(jsonResponse.tracks.items)       return jsonResponse.tracks.items.map((track) => ({       id: track.id,       name:track.name,       artist:track.artists[0].name,       album:track.album.name,       uri:track.uri     }));     }   })  },  //Make a request that returns the user's Spotify username.  getUserId:async () => {    Spotify.getAccessToken();    try{      let response = await fetch(`https://api.spotify.com/v1/me`,{        headers: {          Authorization: `Bearer ${accessToken}`        }      });      if(response.ok){        let jsonResponse = response.json();        userId = jsonResponse.id;      }      throw new Error('Request failed!')    }catch (error){      console.log(error);    }  },  //Make a request that returns the user's Spotify username.  getPlaylistId:async (playlistName) => {    Spotify.getAccessToken();    try{      let response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,{        method: 'POST',        body: JSON.stringify({data:playlistName}),        headers: {          Authorization: `Bearer ${accessToken}`        }      });      if(response.ok){        let jsonResponse = response.json();        playlistId = jsonResponse.id;      }      throw new Error('Request failed!')    }catch (error){      console.log(error);    }  },  getIds: async (playlistName) =>{    await Spotify.getUserId();    await Spotify.getPlaylistId(playlistName);  },  //Save a user's playlist to their Spotify account.  savePlaylist: async (playlistName, trackUris) =>{    if(playlistName === ''){      playlistName="playlist";    }    const data = {      playlistName: playlistName,      trackUris: trackUris    }    console.log("++++++",userId)    Spotify.getIds(playlistName).then(() => {      console.log("++++++",userId)      console.log("---------",playlistId)      if(data.playlistName !=='' && data.trackUris.length !== 0 && userId && playlistId){        Spotify.getAccessToken();        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{          method: 'POST',          body: JSON.stringify({data:data})        }).then(response => {          return response.json();        }).then(jsonResponse => {          return jsonResponse;        })      }    });  }};export default Spotify;